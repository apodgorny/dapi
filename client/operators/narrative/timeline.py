from lib import O, Agent

from client.schemas.narrative_schemas import (
	BeatSchema,
	TimelineSchema,
	ThreadSchema
)

class Timeline(Agent):
	class InputType(O):
		text: str

	class OutputType(O):
		text: str

	async def invoke(self, text):
		# BeatSchema.load(1).delete()
		# VoiceSchema.delete(1)

		# beat = BeatSchema(
		# 	timestamp = 123,
		# 	text      = 'foobar'
		# )
		# voice = VoiceSchema(
		# 	name   = 'test',
		# 	tone   = 'neutral',
		# 	style  = 'flat',
		# 	intent = 'say something'
		# )

		# voice.save()
		# beat.save()

		# voice = VoiceSchema.load(1)
		# beat  = BeatSchema.load(1)

		# voice.style = 'foo'

		# print(beat)
		# print(voice)

		# thread = ThreadSchema(
		# 	voice = voice,
		# 	beats = [beat]
		# )
		# print(thread)
		# thread.save()

		# thread = ThreadSchema.load(1)
		# print(thread)
		# thread.voice.style = 'bar'
		# thread.save()
		# thread = ThreadSchema.load(1)
		# print(thread)

		# beat1 = BeatSchema(
		# 	timestamp = 1232,
		# 	text = "baz"
		# )
		# thread.beats.append(beat1)
		# thread.save()
		# thread = ThreadSchema.load(1)
		# print(thread)

		# BeatSchema.load(1).delete()
		# thread.save()
		# thread = ThreadSchema.load(1)
		# print(thread)

		# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤
		# voice = VoiceSchema(name='test', tone='neutral', style='flat', intent='say something')
		# beat1 = BeatSchema(timestamp=123, text='first')
		# beat2 = BeatSchema(timestamp=456, text='second')

		# voice.save()
		# beat1.save()
		# beat2.save()

		# # –°–≤—è–∑—å —Å thread
		# thread = ThreadSchema(voice=voice, beats=[beat1, beat2])
		# thread.save()
		# print('‚ñ∂Ô∏è Created:', thread)

		# # –£–¥–∞–ª—è–µ–º –æ–¥–∏–Ω beat
		# beat1.delete()
		# thread.save()
		# thread = ThreadSchema.load(thread.id)
		# print('‚ùå After beat1 deletion:', thread)

		# # –£–¥–∞–ª—è–µ–º voice
		# voice.delete()
		# thread.save()
		# thread = ThreadSchema.load(thread.id)
		# print('‚ùå After voice deletion:', thread)

		# # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π beat
		# beat3 = BeatSchema(timestamp=789, text='third')
		# beat3.save()
		# thread.beats.append(beat3)
		# thread.save()
		# thread = ThreadSchema.load(thread.id)
		# print('‚ûï After adding beat3:', thread)
		############
		# v  = VoiceSchema(name='v', tone='soft', style='x', intent='says')
		# b1 = BeatSchema(timestamp=1, text='b1')
		# b2 = BeatSchema(timestamp=2, text='b2')

		# t1 = ThreadSchema(voice=v, beats=[b1, b2])
		# t2 = ThreadSchema(voice=v, beats=[b2])

		# v.save()
		# b1.save()
		# b2.save()
		# t1.save()
		# t2.save()

		# b2.delete()     # ‚õî —É–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç, –≤—Ö–æ–¥—è—â–∏–π –≤ –æ–±–∞ ThreadSchema

		# t1.save()       # üí• –¥–æ–ª–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫
		# t2.save()

		# print(t1)
		# print(t2)
		#######
		# v = VoiceSchema(name='x', tone='t', style='s', intent='foo')
		# v.save()

		# v = VoiceSchema.load(1)
		# v.style = 'new'
		# v.save()

		# v2 = VoiceSchema.load(1)
		# v2.style = 'another'
		# v2.save()

		# print(VoiceSchema.load(1))  # ‚úÖ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å style: "another"
		####
		# b1 = BeatSchema(timestamp=1, text='a')
		# b2 = BeatSchema(timestamp=2, text='b')

		# t1 = ThreadSchema(voice=None, beats=[b1])
		# t2 = ThreadSchema(voice=None, beats=[b2])
		# b1.text = 't1 uses me'
		# b2.text = 't2 uses me'

		# timeline = TimelineSchema(threads={'t1': t1, 't2': t2})
		# timeline.save()

		# TimelineSchema.load(1)

		#####

		# voice = VoiceSchema(
		# 	name   = 'shared',
		# 	tone   = 'warm',
		# 	style  = 'soft',
		# 	intent = 'greet'
		# )
		# voice.save()

		# t1 = ThreadSchema(voice=voice, beats=[])
		# t2 = ThreadSchema(voice=voice, beats=[])
		# t1.save()
		# t2.save()

		# print('‚úÖ Both threads saved:')
		# print(t1)
		# print(t2)

		# # –£–¥–∞–ª—è–µ–º voice
		# voice.delete()

		# print('‚ùå After deleting voice:')
		# print(t1)
		# print(t2)

		# # –ü—Ä–æ–±—É–µ–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–Ω–æ–≤–∞ ‚Äî –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—à–∏–±–∫–∏
		# t1.save()
		# t2.save()

		# print('‚úÖ Saved successfully after voice deletion:')
		# print(t1)
		# print(t2)
		###
		# 1Ô∏è‚É£ –£–¥–∞–ª—è–µ–º Thread ‚Äî –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ edges —É—à–ª–∏, voice/beat –æ—Å—Ç–∞–ª–∏—Å—å
		v = VoiceSchema(name='v', tone='x', style='x', intent='x')
		b = BeatSchema(timestamp=1, text='b1')
		t = ThreadSchema(voice=v, beats=[b])
		v.save()
		b.save()
		t.save()

		t.delete()
		print('‚úÖ Deleted thread:', t)

		assert VoiceSchema.load(v.id)
		assert BeatSchema.load(b.id)

		# 2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º beat –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ –Ω–æ–≤—ã–π thread ‚Äî –¥—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ —Å–æ–∑–¥–∞—é—Ç—Å—è
		t2 = ThreadSchema(voice=v, beats=[b])
		t2.save()
		t2_again = ThreadSchema.load(t2.id)
		assert len(t2_again.beats) == 1
		print('‚úÖ Reused beat in second thread:', t2_again)

		# 3Ô∏è‚É£ –£–¥–∞–ª—è–µ–º beat ‚Üí —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π ‚Üí id –Ω–µ reused
		b2 = BeatSchema(timestamp=2, text='b2')
		b2.save()
		id_old = b2.id
		b2.delete()

		b3 = BeatSchema(timestamp=3, text='b3')
		b3.save()
		assert b3.id != id_old, '‚ùå ID should not be reused!'
		print('‚úÖ New beat has different id:', b3.id)

		# 4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞: load(x) –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç—É –∂–µ —Å—Å—ã–ª–∫—É
		b4 = BeatSchema(timestamp=4, text='b4')
		b4.save()
		ref1 = BeatSchema.load(b4.id)
		ref2 = BeatSchema.load(b4.id)
		assert ref1 is ref2
		print('‚úÖ Cached object returned as same ref')



		return 'done'
